// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  googleId      String   @unique @map("google_id")
  name          String
  email         String   @unique
  role          String   @default("PLAYER") // ADMIN, EDITOR, PLAYER
  bountyBalance Float    @default(0) @map("bounty_balance")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Character customization fields
  characterName     String? @map("character_name") // Character name (not real name)
  avatarUrl         String? @map("avatar_url") // URL to uploaded avatar image
  characterClass    String? @map("character_class") // Character class/archetype
  characterBio      String? @map("character_bio") // Character backstory/description
  preferredPronouns String? @map("preferred_pronouns") // Character pronouns
  favoriteColor     String? @map("favorite_color") // Character's favorite color
  experience        Int     @default(0) // Total experience points earned
  // characterLevel is now calculated from experience, not stored

  // Relations
  createdQuests Quest[]    @relation("QuestCreator")
  claimedQuests Quest[]    @relation("QuestClaimer")
  approvals     Approval[]

  // Personalized quests assigned to this user
  personalizedQuests Quest[] @relation("PersonalizedQuestUser")

  // Store relations
  createdStoreItems StoreItem[]        @relation("StoreItemCreator")
  storeTransactions StoreTransaction[] @relation("StoreTransactionBuyer")
  soldTransactions  StoreTransaction[] @relation("StoreTransactionSeller")

  // Skills relations
  userSkills      UserSkill[]
  createdSkills   Skill[]           @relation("SkillCreator")
  QuestCompletion QuestCompletion[]

  // Notifications
  notifications    Notification[]
  StoreTransaction StoreTransaction[]

  @@map("users")
}

model Skill {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   Int      @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  creator           User                 @relation("SkillCreator", fields: [createdBy], references: [id])
  userSkills        UserSkill[]
  questRequirements QuestRequiredSkill[] @relation("SkillQuestRequirements")

  @@map("skills")
}

model UserSkill {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  skillId   Int      @map("skill_id")
  level     Int      @default(1) // Skill level from 1 to 5
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@map("user_skills")
}

model Quest {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  bounty      Float
  status      String    @default("AVAILABLE") // AVAILABLE, CLAIMED, COMPLETED, APPROVED, REJECTED
  createdBy   Int       @map("created_by")
  claimedBy   Int?      @map("claimed_by")
  claimedAt   DateTime? @map("claimed_at")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  dueDate     DateTime? @map("due_date")

  // Personalized quest: only visible to this user if set
  userId      Int?      @map("user_id")

  // Repeat functionality
  isRepeatable    Boolean   @default(false) @map("is_repeatable")
  cooldownDays    Int?      @map("cooldown_days") // Number of days before quest can be repeated
  lastCompletedAt DateTime? @map("last_completed_at") // When the quest was last completed for repeat tracking

  // Required skills
  requiredSkills QuestRequiredSkill[]

  // Relations
  creator         User              @relation("QuestCreator", fields: [createdBy], references: [id])
  claimer         User?             @relation("QuestClaimer", fields: [claimedBy], references: [id])
  personalizedFor User?             @relation("PersonalizedQuestUser", fields: [userId], references: [id])
  approval        Approval?
  QuestCompletion QuestCompletion[]

  @@index([userId])
  @@map("quests")
}

model QuestRequiredSkill {
  id        Int      @id @default(autoincrement())
  questId   Int      @map("quest_id")
  skillId   Int      @map("skill_id")
  minLevel  Int      @default(1) @map("min_level") // Minimum skill level required
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  quest Quest @relation(fields: [questId], references: [id], onDelete: Cascade)
  skill Skill @relation("SkillQuestRequirements", fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([questId, skillId])
  @@map("quest_required_skills")
}

model Approval {
  id         Int      @id @default(autoincrement())
  questId    Int      @unique @map("quest_id")
  approvedBy Int      @map("approved_by")
  status     String // APPROVED, REJECTED
  notes      String?
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  quest    Quest @relation(fields: [questId], references: [id])
  approver User  @relation(fields: [approvedBy], references: [id])

  @@map("approvals")
}

model StoreItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  cost        Float
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   Int      @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  creator      User               @relation("StoreItemCreator", fields: [createdBy], references: [id])
  transactions StoreTransaction[]

  @@map("store_items")
}

model StoreTransaction {
  id          Int       @id @default(autoincrement())
  itemId      Int       @map("item_id")
  buyerId     Int       @map("buyer_id")
  sellerId    Int       @map("seller_id")
  amount      Float
  status      String    @default("PENDING") // PENDING, APPROVED, REJECTED
  notes       String?
  processedBy Int?      @map("processed_by")
  processedAt DateTime? @map("processed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  item   StoreItem @relation(fields: [itemId], references: [id])
  buyer  User      @relation("StoreTransactionBuyer", fields: [buyerId], references: [id])
  seller User      @relation("StoreTransactionSeller", fields: [sellerId], references: [id])
  User   User?     @relation(fields: [userId], references: [id])
  userId Int?

  @@map("store_transactions")
}

model QuestCompletion {
  id          Int       @id @default(autoincrement())
  questId     Int
  userId      Int
  completedAt DateTime
  approvedAt  DateTime?
  status      String // APPROVED, REJECTED
  rejectionReason String? // Reason for rejection, if any

  quest Quest @relation(fields: [questId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  type      String
  title     String
  message   String
  data      String?
  isRead    Boolean   @default(false) @map("is_read")
  createdAt DateTime  @default(now()) @map("created_at")
  readAt    DateTime? @map("read_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model RewardConfig {
  id                      Int      @id @default(autoincrement())
  monthlyBountyReward     Float    @default(0)
  monthlyQuestReward      Float    @default(0)
  quarterlyCollectiveGoal Float    @default(0)
  quarterlyCollectiveReward String  // Description or prize for the collective reward
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model GroupPool {
  id    Int    @id @default(autoincrement())
  pool  Float  @default(0)
  // Only one row should exist for global pool
}
